// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GasTankFilled extends ethereum.Event {
  get params(): GasTankFilled__Params {
    return new GasTankFilled__Params(this);
  }
}

export class GasTankFilled__Params {
  _event: GasTankFilled;

  constructor(event: GasTankFilled) {
    this._event = event;
  }

  get _promotionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get ethGasLeft(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GasTankRefunded extends ethereum.Event {
  get params(): GasTankRefunded__Params {
    return new GasTankRefunded__Params(this);
  }
}

export class GasTankRefunded__Params {
  _event: GasTankRefunded;

  constructor(event: GasTankRefunded) {
    this._event = event;
  }

  get promotionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PromotionClaimed extends ethereum.Event {
  get params(): PromotionClaimed__Params {
    return new PromotionClaimed__Params(this);
  }
}

export class PromotionClaimed__Params {
  _event: PromotionClaimed;

  constructor(event: PromotionClaimed) {
    this._event = event;
  }

  get promotionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get claimsCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ethGasLeft(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get claimedAt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PromotionCreated extends ethereum.Event {
  get params(): PromotionCreated__Params {
    return new PromotionCreated__Params(this);
  }
}

export class PromotionCreated__Params {
  _event: PromotionCreated;

  constructor(event: PromotionCreated) {
    this._event = event;
  }

  get promotionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get groupId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get destinationDomain(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get claimsPerPerson(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get postId(): string {
    return this._event.parameters[4].value.toString();
  }

  get tokenAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get ethGasLeft(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get badgeURI(): string {
    return this._event.parameters[7].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class ZaisanMain__buildSignatureResultValue0Struct extends ethereum.Tuple {
  get message(): Bytes {
    return this[0].toBytes();
  }

  get isSelectableByUser(): boolean {
    return this[1].toBoolean();
  }

  get extraData(): Bytes {
    return this[2].toBytes();
  }
}

export class ZaisanMain__buildSignature1ResultValue0Struct extends ethereum.Tuple {
  get message(): Bytes {
    return this[0].toBytes();
  }

  get isSelectableByUser(): boolean {
    return this[1].toBoolean();
  }

  get extraData(): Bytes {
    return this[2].toBytes();
  }
}

export class ZaisanMain__buildSignature2ResultValue0Struct extends ethereum.Tuple {
  get message(): Bytes {
    return this[0].toBytes();
  }

  get isSelectableByUser(): boolean {
    return this[1].toBoolean();
  }

  get extraData(): Bytes {
    return this[2].toBytes();
  }
}

export class ZaisanMain__buildSignature3ResultValue0Struct extends ethereum.Tuple {
  get message(): Bytes {
    return this[0].toBytes();
  }

  get isSelectableByUser(): boolean {
    return this[1].toBoolean();
  }

  get extraData(): Bytes {
    return this[2].toBytes();
  }
}

export class ZaisanMain__chainsResult {
  value0: Bytes;
  value1: Address;
  value2: BigInt;
  value3: boolean;

  constructor(value0: Bytes, value1: Address, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getDestinationReceiverAddress(): Bytes {
    return this.value0;
  }

  getMailboxAddress(): Address {
    return this.value1;
  }

  getRelayerGas(): BigInt {
    return this.value2;
  }

  getIsExists(): boolean {
    return this.value3;
  }
}

export class ZaisanMain__claimsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: i32;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }

  getDestinationDomain(): BigInt {
    return this.value0;
  }

  getPromotionAddress(): Address {
    return this.value1;
  }

  getClaimsCount(): BigInt {
    return this.value2;
  }

  getState(): i32 {
    return this.value3;
  }
}

export class ZaisanMain__promotionsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Bytes;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromFixedBytes(this.value6));
    return map;
  }

  getPromotionAddress(): Address {
    return this.value0;
  }

  getCreator(): Address {
    return this.value1;
  }

  getCreatedAt(): BigInt {
    return this.value2;
  }

  getDestinationDomain(): BigInt {
    return this.value3;
  }

  getClaimsPerPerson(): BigInt {
    return this.value4;
  }

  getEthGasLeft(): BigInt {
    return this.value5;
  }

  getGroupId(): Bytes {
    return this.value6;
  }
}

export class ZaisanMain extends ethereum.SmartContract {
  static bind(address: Address): ZaisanMain {
    return new ZaisanMain("ZaisanMain", address);
  }

  ADDRESSES_PROVIDER(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SISMO_CONNECT_LIB_VERSION(): BigInt {
    let result = super.call(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SISMO_CONNECT_LIB_VERSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes16)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  buildSignature(
    isSelectableByUser: boolean
  ): ZaisanMain__buildSignatureResultValue0Struct {
    let result = super.call(
      "buildSignature",
      "buildSignature(bool):((bytes,bool,bytes))",
      [ethereum.Value.fromBoolean(isSelectableByUser)]
    );

    return changetype<ZaisanMain__buildSignatureResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_buildSignature(
    isSelectableByUser: boolean
  ): ethereum.CallResult<ZaisanMain__buildSignatureResultValue0Struct> {
    let result = super.tryCall(
      "buildSignature",
      "buildSignature(bool):((bytes,bool,bytes))",
      [ethereum.Value.fromBoolean(isSelectableByUser)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ZaisanMain__buildSignatureResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  buildSignature1(
    message: Bytes,
    extraData: Bytes
  ): ZaisanMain__buildSignature1ResultValue0Struct {
    let result = super.call(
      "buildSignature",
      "buildSignature(bytes,bytes):((bytes,bool,bytes))",
      [ethereum.Value.fromBytes(message), ethereum.Value.fromBytes(extraData)]
    );

    return changetype<ZaisanMain__buildSignature1ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_buildSignature1(
    message: Bytes,
    extraData: Bytes
  ): ethereum.CallResult<ZaisanMain__buildSignature1ResultValue0Struct> {
    let result = super.tryCall(
      "buildSignature",
      "buildSignature(bytes,bytes):((bytes,bool,bytes))",
      [ethereum.Value.fromBytes(message), ethereum.Value.fromBytes(extraData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ZaisanMain__buildSignature1ResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  buildSignature2(
    isSelectableByUser: boolean,
    extraData: Bytes
  ): ZaisanMain__buildSignature2ResultValue0Struct {
    let result = super.call(
      "buildSignature",
      "buildSignature(bool,bytes):((bytes,bool,bytes))",
      [
        ethereum.Value.fromBoolean(isSelectableByUser),
        ethereum.Value.fromBytes(extraData)
      ]
    );

    return changetype<ZaisanMain__buildSignature2ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_buildSignature2(
    isSelectableByUser: boolean,
    extraData: Bytes
  ): ethereum.CallResult<ZaisanMain__buildSignature2ResultValue0Struct> {
    let result = super.tryCall(
      "buildSignature",
      "buildSignature(bool,bytes):((bytes,bool,bytes))",
      [
        ethereum.Value.fromBoolean(isSelectableByUser),
        ethereum.Value.fromBytes(extraData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ZaisanMain__buildSignature2ResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  buildSignature3(
    message: Bytes,
    isSelectableByUser: boolean,
    extraData: Bytes
  ): ZaisanMain__buildSignature3ResultValue0Struct {
    let result = super.call(
      "buildSignature",
      "buildSignature(bytes,bool,bytes):((bytes,bool,bytes))",
      [
        ethereum.Value.fromBytes(message),
        ethereum.Value.fromBoolean(isSelectableByUser),
        ethereum.Value.fromBytes(extraData)
      ]
    );

    return changetype<ZaisanMain__buildSignature3ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_buildSignature3(
    message: Bytes,
    isSelectableByUser: boolean,
    extraData: Bytes
  ): ethereum.CallResult<ZaisanMain__buildSignature3ResultValue0Struct> {
    let result = super.tryCall(
      "buildSignature",
      "buildSignature(bytes,bool,bytes):((bytes,bool,bytes))",
      [
        ethereum.Value.fromBytes(message),
        ethereum.Value.fromBoolean(isSelectableByUser),
        ethereum.Value.fromBytes(extraData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ZaisanMain__buildSignature3ResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  chains(param0: BigInt): ZaisanMain__chainsResult {
    let result = super.call(
      "chains",
      "chains(uint32):(bytes32,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ZaisanMain__chainsResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_chains(param0: BigInt): ethereum.CallResult<ZaisanMain__chainsResult> {
    let result = super.tryCall(
      "chains",
      "chains(uint32):(bytes32,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZaisanMain__chainsResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  claims(param0: Bytes, param1: Address): ZaisanMain__claimsResult {
    let result = super.call(
      "claims",
      "claims(bytes32,address):(uint32,address,uint256,uint8)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new ZaisanMain__claimsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toI32()
    );
  }

  try_claims(
    param0: Bytes,
    param1: Address
  ): ethereum.CallResult<ZaisanMain__claimsResult> {
    let result = super.tryCall(
      "claims",
      "claims(bytes32,address):(uint32,address,uint256,uint8)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZaisanMain__claimsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toI32()
      )
    );
  }

  getQuotedPayment(destinationDomain: BigInt): BigInt {
    let result = super.call(
      "getQuotedPayment",
      "getQuotedPayment(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(destinationDomain)]
    );

    return result[0].toBigInt();
  }

  try_getQuotedPayment(destinationDomain: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuotedPayment",
      "getQuotedPayment(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(destinationDomain)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  igp(): Address {
    let result = super.call("igp", "igp():(address)", []);

    return result[0].toAddress();
  }

  try_igp(): ethereum.CallResult<Address> {
    let result = super.tryCall("igp", "igp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  iqsRouter(): Address {
    let result = super.call("iqsRouter", "iqsRouter():(address)", []);

    return result[0].toAddress();
  }

  try_iqsRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("iqsRouter", "iqsRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mailbox(): Address {
    let result = super.call("mailbox", "mailbox():(address)", []);

    return result[0].toAddress();
  }

  try_mailbox(): ethereum.CallResult<Address> {
    let result = super.tryCall("mailbox", "mailbox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  promotions(param0: Bytes): ZaisanMain__promotionsResult {
    let result = super.call(
      "promotions",
      "promotions(bytes32):(address,address,uint256,uint32,uint256,uint256,bytes16)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new ZaisanMain__promotionsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBytes()
    );
  }

  try_promotions(
    param0: Bytes
  ): ethereum.CallResult<ZaisanMain__promotionsResult> {
    let result = super.tryCall(
      "promotions",
      "promotions(bytes32):(address,address,uint256,uint32,uint256,uint256,bytes16)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZaisanMain__promotionsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBytes()
      )
    );
  }

  worldIDStaging(): Address {
    let result = super.call("worldIDStaging", "worldIDStaging():(address)", []);

    return result[0].toAddress();
  }

  try_worldIDStaging(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "worldIDStaging",
      "worldIDStaging():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get sismoAppId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _worldCoinAppId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddChainCall extends ethereum.Call {
  get inputs(): AddChainCall__Inputs {
    return new AddChainCall__Inputs(this);
  }

  get outputs(): AddChainCall__Outputs {
    return new AddChainCall__Outputs(this);
  }
}

export class AddChainCall__Inputs {
  _call: AddChainCall;

  constructor(call: AddChainCall) {
    this._call = call;
  }

  get destinationDomain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get destinationReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get mailboxAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get relayerGas(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddChainCall__Outputs {
  _call: AddChainCall;

  constructor(call: AddChainCall) {
    this._call = call;
  }
}

export class ClaimPromotionCall extends ethereum.Call {
  get inputs(): ClaimPromotionCall__Inputs {
    return new ClaimPromotionCall__Inputs(this);
  }

  get outputs(): ClaimPromotionCall__Outputs {
    return new ClaimPromotionCall__Outputs(this);
  }
}

export class ClaimPromotionCall__Inputs {
  _call: ClaimPromotionCall;

  constructor(call: ClaimPromotionCall) {
    this._call = call;
  }

  get _promotionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get claimer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get zkConnectResponse(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get root(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get worldcoinProof(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class ClaimPromotionCall__Outputs {
  _call: ClaimPromotionCall;

  constructor(call: ClaimPromotionCall) {
    this._call = call;
  }
}

export class CreatePromotionCall extends ethereum.Call {
  get inputs(): CreatePromotionCall__Inputs {
    return new CreatePromotionCall__Inputs(this);
  }

  get outputs(): CreatePromotionCall__Outputs {
    return new CreatePromotionCall__Outputs(this);
  }
}

export class CreatePromotionCall__Inputs {
  _call: CreatePromotionCall;

  constructor(call: CreatePromotionCall) {
    this._call = call;
  }

  get promotionParams(): CreatePromotionCallPromotionParamsStruct {
    return changetype<CreatePromotionCallPromotionParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreatePromotionCall__Outputs {
  _call: CreatePromotionCall;

  constructor(call: CreatePromotionCall) {
    this._call = call;
  }
}

export class CreatePromotionCallPromotionParamsStruct extends ethereum.Tuple {
  get claimsPerPerson(): BigInt {
    return this[0].toBigInt();
  }

  get badgeURI(): string {
    return this[1].toString();
  }

  get postId(): string {
    return this[2].toString();
  }

  get tokenAddress(): Address {
    return this[3].toAddress();
  }

  get groupId(): Bytes {
    return this[4].toBytes();
  }

  get destinationDomain(): BigInt {
    return this[5].toBigInt();
  }

  get salt(): BigInt {
    return this[6].toBigInt();
  }
}

export class FillGasCall extends ethereum.Call {
  get inputs(): FillGasCall__Inputs {
    return new FillGasCall__Inputs(this);
  }

  get outputs(): FillGasCall__Outputs {
    return new FillGasCall__Outputs(this);
  }
}

export class FillGasCall__Inputs {
  _call: FillGasCall;

  constructor(call: FillGasCall) {
    this._call = call;
  }

  get _promotionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class FillGasCall__Outputs {
  _call: FillGasCall;

  constructor(call: FillGasCall) {
    this._call = call;
  }
}

export class RefundGasCall extends ethereum.Call {
  get inputs(): RefundGasCall__Inputs {
    return new RefundGasCall__Inputs(this);
  }

  get outputs(): RefundGasCall__Outputs {
    return new RefundGasCall__Outputs(this);
  }
}

export class RefundGasCall__Inputs {
  _call: RefundGasCall;

  constructor(call: RefundGasCall) {
    this._call = call;
  }

  get _promotionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RefundGasCall__Outputs {
  _call: RefundGasCall;

  constructor(call: RefundGasCall) {
    this._call = call;
  }
}
