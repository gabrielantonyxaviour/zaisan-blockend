// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Promotion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Promotion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Promotion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Promotion", id.toString(), this);
    }
  }

  static load(id: string): Promotion | null {
    return changetype<Promotion | null>(store.get("Promotion", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get groupId(): Bytes {
    let value = this.get("groupId");
    return value!.toBytes();
  }

  set groupId(value: Bytes) {
    this.set("groupId", Value.fromBytes(value));
  }

  get destinationDomain(): BigInt {
    let value = this.get("destinationDomain");
    return value!.toBigInt();
  }

  set destinationDomain(value: BigInt) {
    this.set("destinationDomain", Value.fromBigInt(value));
  }

  get claimsPerPerson(): BigInt {
    let value = this.get("claimsPerPerson");
    return value!.toBigInt();
  }

  set claimsPerPerson(value: BigInt) {
    this.set("claimsPerPerson", Value.fromBigInt(value));
  }

  get postId(): string {
    let value = this.get("postId");
    return value!.toString();
  }

  set postId(value: string) {
    this.set("postId", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get ethGas(): BigInt {
    let value = this.get("ethGas");
    return value!.toBigInt();
  }

  set ethGas(value: BigInt) {
    this.set("ethGas", Value.fromBigInt(value));
  }

  get badgeURI(): string {
    let value = this.get("badgeURI");
    return value!.toString();
  }

  set badgeURI(value: string) {
    this.set("badgeURI", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claim", id.toString(), this);
    }
  }

  static load(id: string): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get promotionId(): string {
    let value = this.get("promotionId");
    return value!.toString();
  }

  set promotionId(value: string) {
    this.set("promotionId", Value.fromString(value));
  }

  get claimer(): Bytes {
    let value = this.get("claimer");
    return value!.toBytes();
  }

  set claimer(value: Bytes) {
    this.set("claimer", Value.fromBytes(value));
  }

  get currentClaims(): BigInt {
    let value = this.get("currentClaims");
    return value!.toBigInt();
  }

  set currentClaims(value: BigInt) {
    this.set("currentClaims", Value.fromBigInt(value));
  }

  get claimedAt(): BigInt {
    let value = this.get("claimedAt");
    return value!.toBigInt();
  }

  set claimedAt(value: BigInt) {
    this.set("claimedAt", Value.fromBigInt(value));
  }
}
